service: web-storiesedit

plugins:
  - serverless-single-page-app-plugin
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${opt:region, self:custom.defaultRegion}
  deploymentBucket:
    name: pg-deployments
    serverSideEncryption: AES256

custom:
  defaultStage: staging
  defaultRegion: us-west-2
  s3LocalPath: dist/
  s3Bucket: web-storiesedit-${self:provider.stage}
  domains:
    staging: staging-storiesedit.planoly.com
    preprod: preprod-storiesedit.planoly.com
    production: storiesedit.planoly.com
resources:
  Resources:
    WebAppRoute53:
      Type: AWS::Route53::RecordSet
      Properties:
        Type: A
        Name: ${self:custom.domains.${self:provider.stage}}
        HostedZoneName: planoly.com.
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # This is actual hardcoded value AWS expects for CloudFront distribution
          DNSName:
            'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: Private
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          Aliases:
            - ${self:custom.domains.${self:provider.stage}}
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            Compress: 'true'
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: none
              Headers:
                - Origin
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
            MinTTL: 86400
            MaxTTL: 31536000
            DefaultTTL: 86400
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            SslSupportMethod: sni-only
            AcmCertificateArn: arn:aws:acm:us-east-1:#{AWS::AccountId}:certificate/0c9d3626-e8b9-49b2-a107-5c2816de41fd

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppS3BucketOutput:
      Value:
        'Ref': WebAppS3Bucket
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
